// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ValueAdded extends ethereum.Event {
  get params(): ValueAdded__Params {
    return new ValueAdded__Params(this);
  }
}

export class ValueAdded__Params {
  _event: ValueAdded;

  constructor(event: ValueAdded) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Exemple__getDataResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class Exemple extends ethereum.SmartContract {
  static bind(address: Address): Exemple {
    return new Exemple("Exemple", address);
  }

  addr(): Address {
    let result = super.call("addr", "addr():(address)", []);

    return result[0].toAddress();
  }

  try_addr(): ethereum.CallResult<Address> {
    let result = super.tryCall("addr", "addr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getData(): Exemple__getDataResult {
    let result = super.call("getData", "getData():(uint256,address)", []);

    return new Exemple__getDataResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_getData(): ethereum.CallResult<Exemple__getDataResult> {
    let result = super.tryCall("getData", "getData():(uint256,address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Exemple__getDataResult(value[0].toBigInt(), value[1].toAddress())
    );
  }

  value(): BigInt {
    let result = super.call("value", "value():(uint256)", []);

    return result[0].toBigInt();
  }

  try_value(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("value", "value():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SetValueCall extends ethereum.Call {
  get inputs(): SetValueCall__Inputs {
    return new SetValueCall__Inputs(this);
  }

  get outputs(): SetValueCall__Outputs {
    return new SetValueCall__Outputs(this);
  }
}

export class SetValueCall__Inputs {
  _call: SetValueCall;

  constructor(call: SetValueCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetValueCall__Outputs {
  _call: SetValueCall;

  constructor(call: SetValueCall) {
    this._call = call;
  }
}
